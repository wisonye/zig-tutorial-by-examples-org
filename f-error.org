* Error

** ~error~ looks and acts like an ~enum~

#+BEGIN_SRC zig
  const ServerError = error{
      ServerIsNotReady,
      ServerIsTooBusy,
  };
#+END_SRC


** Variable or function return type can be =Error union= type

=Error union= looks like the =Result<T,E>= type in =Rust= but with different syntax:

~ErrorType!SuccessType~

But the =ErrorType= is just optional, so all of the following work:

- ~!void~: With no =ErrorType= provided
- ~anyerror!void~: With ~anyerror~ (generic =ErrorType=)
- ~ServerError!void~: With the particluar =ErrorType=

~anyerror~ refers to the global error set.

You can use ~{!any}~ or ~{!s}~ format string to print an error union value:

Example:

#+BEGIN_SRC zig
  // Error or string
  var error_or_string: ServerError![]const u8 = ServerError.ServerIsTooBusy;
  // var error_or_string: anyerror![]const u8 = ServerError.ServerIsTooBusy;

  print(
      "\n>>> [ errors ] - error_or_string type: {}, value: {!any}",
      .{ @TypeOf(error_or_string), error_or_string },
  );
  print(
      "\n>>> [ errors ] - error_or_string type: {}, value (in string): {!s}",
      .{ @TypeOf(error_or_string), error_or_string },
  );
#+END_SRC

#+BEGIN_SRC bash
  # >>> [ errors ] - error_or_string type: error{ServerIsNotReady,ServerIsTooBusy}![]const u8, value: error.ServerIsTooBusy
  # >>> [ errors ] - error_or_string type: error{ServerIsNotReady,ServerIsTooBusy}![]const u8, value (in string): error.ServerIsTooBusy⏎
#+END_SRC


** Error handling in different ways

For example, you have the following server type and the process function:

#+BEGIN_SRC zig
  const ServerError = error{
      ServerIsNotReady,
      ServerIsTooBusy,
      ServerIsOutOfService,
  };

  const String = []const u8;

  fn process(seq_no: usize) ServerError!String {
      switch (seq_no) {
          1...10 => return "Your request has been placed into the process queue",
          20...50 => return ServerError.ServerIsTooBusy,
          else => return ServerError.ServerIsOutOfService,
      }
  }
#+END_SRC


Now, you can do your error handling based on different purposes:

Tips, use ~@errorName(ERROR_HERE)~ to convert error enum to ~[]const u8~.

*** If you only care about the success case, then you can throw the error to upper caller.

#+BEGIN_SRC zig
  const seq_no = 55;
  var result: String = "";
  result = try process(seq_no);

  //
  // Same with above, `try` is a syntax suger, the followings are equivalent:
  // - `try FunctionCall();`
  // - `FunctionCall() catch |err| return err;`
  //
  result = process(seq_no) catch |err| return err;
#+END_SRC


*** If you want to convert the error into default/another value

#+BEGIN_SRC zig
  const seq_no = 55;
  var result: String = "";

  //
  // If you want to convert the error into default/another value
  //
  result = process(seq_no) catch "Default Value";
  print("\n>>> result: {s}", .{result});

  //
  // If you want to convert the error into default/another value and do
  // do something before that, then you can use block expression to return
  // value
  //
  result = process(seq_no) catch |err| blk: {
      print("\n>>> error happened: {s}", .{@errorName(err)});
      break :blk "Error Happend";
  };
  print("\n>>> result: {s}", .{result});
#+END_SRC


*** You can use =if else= like this

#+BEGIN_SRC zig
  const seq_no = 55;
  var result: String = "";

  if (process(seq_no)) |temp_result| {
      print("\n>>> Process succeeded with result: {s}", .{temp_result});
  } else |err| {
      print("\n>>> Process failed with error: {s}", .{@errorName(err)});
  }
#+END_SRC


*** You can use =if else + switch= to handle different errors like this

#+BEGIN_SRC zig
  const seq_no = 55;
  var result: String = "";

  if (process(seq_no)) |temp_result| {
      print("\n>>> Process succeeded with result: {s}", .{temp_result});
  } else |err| switch (err) {
      // These error are ok:
      ServerError.ServerIsNotReady,
      ServerError.ServerIsTooBusy,
      => print("\n>>> (switch) Process failed with error: {s}", .{
          @errorName(err),
      }),

      // This is NOT acceptable!!!
      ServerError.ServerIsOutOfService => {
          print(
              "\n>>> (switch)\n     ALARM ALARM ALARM!!!\n     This has just happened: {s}!!!\n     ALARM ALARM ALARM!!!\n\n\n",
              .{@errorName(err)},
          );
          // This should never happen!!!!
          unreachable;
      },
  }

#+END_SRC

