* Type conversion

** ~@as~: From ~anytype~ (expression) to ~T~,  is the preferred way to convert

#+BEGIN_SRC zig
  _ = @as(comptime_int, 10);
  _ = @as(f32, 10);
#+END_SRC


** Between types

| Function              | Description                                                        |
|-----------------------+--------------------------------------------------------------------|
| ~@intFromBool~          | convert true to 1 and false to 0                                   |
| ~@intFromEnum~          | obtain the integer tag value of an enum or tagged union            |
| ~@intFromFloat~         | convert float to integer                                           |
| ~@intFromError~         | obtain the integer value of an error code                          |
| ~@intFromPtr~           |                                                                    |
| ~@intCast~              | convert between integer types                                      |
| ~@truncate~             | get back a smaller or same-sized integer type, e.g u16 -> u8, etc. |
|                       |                                                                    |
| ~@floatCast~            | convert a larger float to a smaller float                          |
| ~@floatFromInt~         | convert an integer to a float value                                |
|                       |                                                                    |
| ~@enumFromInt~          | obtain an enum value based on its integer tag value                |
| ~@errorFromInt~         | obtain an error code based on its integer value                    |
| ~@errSetCast~           | convert to a smaller error set                                     |
| ~@errorName~            | convert error into string                                          |
|                       |                                                                    |
| ~std.fmt.parseInt~      | convert string to integer                                          |
| ~std.fmt.parseUnsigned~ | convert string to integer                                          |
| ~std.fmt.parseFloat~    | convert string to float                                            |
|                       |                                                                    |


For example:

#+BEGIN_SRC zig
  const temp_int = try std.fmt.parseInt(u8, "11", 10);
  const hex_u8 = try std.fmt.parseInt(u8, "0A", 16);

  const radius = std.fmt.parseFloat(
      f32,
      std.mem.trim(u8, radius_str, " "),
  ) catch 10.0;
#+END_SRC
