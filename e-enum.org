* Enum

** ~enum~

By default, =enum= value is integer, you can use ~@intFromEnum~ to get back the integer value and use ~@tagName~ to get back the string.

#+BEGIN_SRC zig
  const LOG_PREFIX = "[ test_enum ]";

  fn print_enum(var_name: []const u8, e: anytype) void {
      print(
          "\n{s} {s}, type: {}, size: {}, tagName: {s}, value: {}, value in integer: {}",
          .{
              LOG_PREFIX,
              var_name,
              @TypeOf(e),
              @sizeOf(@TypeOf(e)),
              @tagName(e),
              e,
              @intFromEnum(e),
          },
      );
  }

  //
  // You can specify the enum base type, otherwise, use `u8` by default:
  //
  // const Status = enum(u16) {
  //
  const Status = enum {
      //
      // You can specify the enum tag value, otherwise, starts from `0`!!!
      // In this way, you must provide the enum base type, e.g. `enum(u16)`!!!
      //
      // Pending = 0x0A,
      //
      Pending,
      Processing,
      Done,
  };

  pub fn test_enum() void {
      //
      // You can use `.` enum value to let compiler to guess the enum value
      // instead using the exact enum type like this:
      //
      // var current_state = Status.Pending;
      //
      var current_state: Status = .Pending;
      print_enum("current_state", current_state);

      current_state = .Processing;
      print_enum("current_state", current_state);

      current_state = .Done;
      print_enum("current_state", current_state);
  }

  const std = @import("std");
  const print = std.debug.print;
#+END_SRC

Output:

#+BEGIN_SRC bash
  [ test_enum ] current_state, type: enum.Status, size: 1, tagName: Pending, value: enum.Status.Pending, value in integer: 0
  [ test_enum ] current_state, type: enum.Status, size: 1, tagName: Processing, value: enum.Status.Processing, value in integer: 1
  [ test_enum ] current_state, type: enum.Status, size: 1, tagName: Done, value: enum.Status.Done, value in integer: 2
#+END_SRC


** ~enum~ with method

#+BEGIN_SRC zig
  pub fn main() void {
      const ResultU8 = enum(u8) {
          Success = 0x01,
          Failure = 0x04,

          const Self = @This();

          pub fn to_string(self: Self) []const u8 {
              if (self == Self.Success) {
                  return "Success:)";
              } else if (self == Self.Failure) {
                  return "Failure:)";
              } else {
                  return "Unknown";
              }
          }
      };

      const result_2 = ResultU8.Failure;

      print(
          "\n>>> [ enum ] - result_2: {s}",
          .{result_2.to_string()},
      );
  }
#+END_SRC

#+BEGIN_SRC bash
  # >>> [ enum ] - result_2: Failure:)
#+END_SRC


** Switch on enum

#+BEGIN_SRC zig
  pub fn main() void {
      const ResultU8 = enum(u8) {
          Success = 0x01,
          Failure = 0x04,
      };

      //
      // Switch on enum
      //
      const failure_result = ResultU8.Failure;
      const result_str = switch (failure_result) {
          ResultU8.Success => "Success",
          ResultU8.Failure => "Failure",
      };

      print(
          "\n>>> [ enum ] - result_str: {s}",
          .{result_str},
      );
  }

  const std = @import("std");
  const print = std.debug.print;
#+END_SRC
