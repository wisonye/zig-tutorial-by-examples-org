* Hello world (C) cross-compilation

Here is simple hellow world of =C= (copy and save it to =./temp.c=)

#+BEGIN_SRC c
  #include <stdio.h>

  int main(void) {
      printf("\n>>> Hello world");
      return 0;
  }
#+END_SRC


** Build and run by =zig cc=

#+BEGIN_SRC c
  zig cc -o temp_c -std=c11 -Os -DNDEBUG temp.c && strip temp_c && ./temp_c
#+END_SRC


** Cross-compilation

#+BEGIN_SRC bash
  # Linux MUSL (Intel and ARM64)
  zig cc -o c_x86_64-linux-musl -std=c11 -Os -DNDEBUG temp.c -target x86_64-linux-musl
  zig cc -o c_aarch64-linux-musl -std=c11 -Os -DNDEBUG temp.c -target aarch64-linux-musl

  # Liunx GLIBC (Intel and ARM64)
  zig cc -o c_x86_64-linux-gnu -std=c11 -Os -DNDEBUG temp.c -target x86_64-linux-gnu
  zig cc -o c_aarch64-linux-gnu -std=c11 -Os -DNDEBUG temp.c -target aarch64-linux-gnu

  # MacOS (Intel and ARM64/M1/M2)
  zig cc -o c_x86_64-macos-none -std=c11 -Os -DNDEBUG temp.c -target x86_64-macos-none
  zig cc -o c_aarch64-macos-none -std=c11 -Os -DNDEBUG temp.c -target aarch64-macos-none
#+END_SRC

Executable format:

#+BEGIN_SRC bash
  file c_aarch64-linux-musl
  # c_aarch64-linux-musl: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), statically linked, with debug_info, not stripped
  file c_x86_64-linux-musl
  # c_x86_64-linux-musl: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, with debug_info, not stripped

  file c_aarch64-linux-gnu
  # c_aarch64-linux-gnu: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, for GNU/Linux 2.0.0, with debug_info, not stripped
  file c_x86_64-linux-gnu
  # c_x86_64-linux-gnu: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.0.0, with debug_info, not stripped

  file c_aarch64-macos-none
  # c_aarch64-macos-none: Mach-O 64-bit executable arm64
  file c_x86_64-macos-none
  # c_x86_64-macos-none: Mach-O 64-bit executable x86_64
#+END_SRC



So, here is the size difference:

#+BEGIN_SRC bash
  ls -lht

  #  49K c_aarch64-macos-none*
  #  17K c_x86_64-macos-none*
  # 9.6K c_aarch64-linux-gnu*
  # 8.3K c_x86_64-linux-gnu*
  # 706K c_aarch64-linux-musl*
  # 212K c_x86_64-linux-musl*
#+END_SRC

