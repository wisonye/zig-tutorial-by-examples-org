* Pointer conversion

** Convert between pointer and integer

| Function    | Description                                                       |
|-------------+-------------------------------------------------------------------|
| ~@intFromPtr~ | From ~*T/?*T~ to ~usize~                                              |
| ~@ptrFromInt~ | From ~intFromPtr~ to ~*T/?*T~                                         |
| ~@ptrCast~    | From ~*T~ to ~*Another~, the return type is the inferred result type. |
|             |                                                                   |

Example:

#+BEGIN_SRC zig
  const temp_var = "string literal";
  const ptr = &temp_var;
  const int_from_ptr = @intFromPtr(ptr);
  const ptr_from_int: *usize = @ptrFromInt(int_from_ptr);

  print("\n>>> ptr: {*}", .{ptr});
  print("\n>>> int_from_ptr: 0x{X}", .{int_from_ptr});
  print("\n>>> ptr_from_int: {p}", .{ptr_from_int});
#+END_SRC

#+BEGIN_SRC bash
  # >>> ptr: *const [14:0]u8@2aa9f0
  # >>> int_from_ptr: 0x2AA9F0
  # >>> ptr_from_int: usize@2aa9f0
#+END_SRC


** Convert between different type of pointers

| Function      | Description                                                       |
|---------------+-------------------------------------------------------------------|
| ~@ptrCast~      | From ~*T~ to ~*Another~, the return type is the inferred result type. |
| ~@constCast~    | Remove the ~const~ from ~*const T~ to ~*T~                              |
| ~@volatileCast~ | move the ~volatile~ from ~*volatile T~ to ~*T~                          |
|               |                                                                   |


For the ~@ptrCast~, you have to provide the result type either via explicit variable type or type conversion combined with ~@as~. Otherwise, you will end up with the following error:

=@ptrCast must have a known result type=


Example:

#+BEGIN_SRC zig
  const string_literal_var = "string literal";
  const ptr_with_explicity_type: [*]const u8 = @ptrCast(string_literal_var);
  const ptr_without_explicity_type = @as([*]const u8, @ptrCast(string_literal_var));

  print("\n>>> ptr_with_explicity_type, type: {}, address: 0x{*}", .{
      @TypeOf(ptr_with_explicity_type),
      ptr_with_explicity_type,
  });
  print("\n>>> ptr_without_explicity_type, type: {}, address: 0x{*}", .{
      @TypeOf(ptr_without_explicity_type),
      ptr_without_explicity_type,
  });
#+END_SRC

#+BEGIN_SRC bash
  # >>> ptr_with_explicity_type, type: [*]const u8, address: 0xu8@20cc08
  # >>> ptr_without_explicity_type, type: [*]const u8, address: 0xu8@20cc08
#+END_SRC


** Something about =Alignment=

Each type has an alignment - a number of bytes such that, when a value of the type is loaded from or stored to memory, the memory address must be evenly divisible by this number.

You can use ~@alignOf~ to find out this value for any type.

Alignment depends on the CPU architecture, but is always a power of two, and less than ~1 << 29~.

| Function   | Description                                                        |
|------------+--------------------------------------------------------------------|
| ~@alignOf~   | Returns the number of bytes from a given type should be aligned to |
|            | for the current target to match the C ABI.                         |
| ~@alignCast~ |                                                                    |


And you need to keep that in mind:

+ 1) ~*T~ is really a shorthand for ~*align(@alignOf(T)) T~.

+ 2) ~void*~ in =Zig= is ~?*anyopaque~ can point to any individual byte in memory, which means it has alignment 1 (byte).


Let's take a look at an example, suppose that you have a struct like below and do a heap allocation via standard C API:

#+BEGIN_SRC zig
  const MyResult = struct {
      success_code: u16,
      error_code: u16,
  };

  pub fn main() void {
      //
      // Heap allocation via standard libc style, it returns 'void *' (without type info)
      //
      const my_result_ptr = std.c.malloc(@sizeOf(MyResult));
      print("\n>>> my_result_ptr, type: {} , address: {*}", .{
          @TypeOf(my_result_ptr),
          my_result_ptr,
      });
  }
#+END_SRC

So, the ~my_result_ptr~ pointer type is ~?*anyopaque~ which mean ~void *~. The above code runs fine, but if you try to convert the ~my_result_ptr~ to the ~*MyResult~ like this:


#+BEGIN_SRC zig
  const my_result_ptr = @as(
      ,*MyResult,
      @ptrCast(std.c.malloc(@sizeOf(MyResult))),
  );
  print("\n>>> my_result_ptr, type: {} , address: {*}", .{
      @TypeOf(my_result_ptr),
      my_result_ptr,
  });
#+END_SRC

It fails with the following error:

#+BEGIN_SRC bash
  src/main.zig:17:9: error: cast increases pointer alignment
          @ptrCast(std.c.malloc(@sizeOf(MyResult))),
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  src/main.zig:17:30: note: '?*anyopaque' has alignment '1'
          @ptrCast(std.c.malloc(@sizeOf(MyResult))),
                   ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
  src/main.zig:17:9: note: '*main.MyResult' has alignment '2'
  src/main.zig:17:9: note: use @alignCast to assert pointer alignment
#+END_SRC


That's because the alignment is different between ~*MyResult~ and ~?anyopaque (void *)~. In that case, you have to combine ~@alignCast~ and ~@ptrCast~ together like this:

#+BEGIN_SRC zig
  pub fn main() void {
      const my_result_ptr = @as(
          *MyResult,
          @alignCast(@ptrCast(std.c.malloc(@sizeOf(MyResult)))),
      );
      print("\n>>> my_result_ptr, type: {} , address: {*}", .{
          @TypeOf(my_result_ptr),
          my_result_ptr,
      });

      my_result_ptr.* = MyResult{
          .success_code = 888,
          .error_code = 999,
      };
      print("\n>>> my_result_ptr, address: {*}, value: {any}", .{
          my_result_ptr,
          my_result_ptr.*,
      });
  }
#+END_SRC

Then it works:

#+BEGIN_SRC bash
  # >>> my_result_ptr, type: *main.MyResult , address: main.MyResult@85e2a0
  # >>> my_result_ptr, address: main.MyResult@85e2a0, value: main.MyResult{ .success_code = 888, .error_code = 999 }‚èé
#+END_SRC
