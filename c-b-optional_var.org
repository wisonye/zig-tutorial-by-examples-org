* Optional Type

Syntax is =?TYPE= and the value can be either:

- Have value of =TYPE=
- =null= for no value

#+BEGIN_SRC zig
  //
  // Optional 'string' type and init to `null`
  //
  var tips: ?[]const u8 = null;
  print(
      "\n>>> [ optional_variables ] - tips (option var) type: {}, value: {?s}",
      .{ @TypeOf(tips), tips },
  );
#+END_SRC


#+BEGIN_SRC bash
  # >>> [ optional_variables ] - tips (option var) type: ?[]const u8, value: null
#+END_SRC

</br>

#+BEGIN_SRC zig
  // Assign value
  tips = "Zig is cool!";
  print(
      "\n>>> [ optional_variables ] - tips (option var) type: {}, value: {?s}",
      .{ @TypeOf(tips), tips },
  );
#+END_SRC

#+BEGIN_SRC bash
  # >>> [ optional_variables ] - tips (option var) type: ?[]const u8, value: Zig is cool!
#+END_SRC


~[]const u8~ read as =const slice of u8= which is a string literal, just leave it right now.

~?[]const u8~ read as =an optional const slice of u8= which is either =null= or a valid string literal.


* An optional variable can do something like ~unwrap~ in =Rust=

You got a few ways to do that:

*** Use =orelse= to give a value if optional variable is =null=

#+BEGIN_SRC zig
  var maybe_have_int_value: ?usize = null;
  // const unwrapped_with_orelse = if (maybe_have_int_value != null) maybe_have_int_value else 888;
  const unwrapped_with_orelse = maybe_have_int_value orelse 888;
  print(
      "\n>>> [ optional_variables ] - unwrapped_with_orelse (option var) type: {}, value: {?}",
      .{ @TypeOf(unwrapped_with_orelse), unwrapped_with_orelse },
  );
#+END_SRC


#+BEGIN_SRC zig
  # >>> [ optional_variables ] - unwrapped_with_orelse (option var) type: usize, value: 888
#+END_SRC



*** Use =.?= to unwrap the value if you make sure it has a value

#+BEGIN_SRC zig
  maybe_have_int_value = 999;
  const unwrapped_value = maybe_have_int_value.?;
  print(
      "\n>>> [ optional_variables ] - unwrapped_value  (option var) type: {}, value: {?}",
      .{ @TypeOf(unwrapped_value), unwrapped_value },
  );
#+END_SRC

#+BEGIN_SRC zig
  # >>> [ optional_variables ] - unwrapped_value  (option var) type: usize, value: 999⏎
#+END_SRC


*** Use =if (optional_var) |value| {}= block

#+BEGIN_SRC zig
  //
  // If `maybe_have_int_value` isn't `null`, then the `value` holds the acutal value
  //
  if (maybe_have_int_value) |value| {
      print(
          "\n>>> [ optional_variables ] - unwrapped_value: {}",
          .{value},
      );
  }
#+END_SRC

