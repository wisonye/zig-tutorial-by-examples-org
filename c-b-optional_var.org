* Optional variable

** Overview

Syntax is =?TYPE= and the value can be either:

- Have value of =TYPE=
- =null= for no value

#+BEGIN_SRC zig
  const LOG_PREFIX = "[ test_optional_variable ]";

  //
  // Optional var, `null` mean no payload!!!
  //
  const age: ?u8 = null;
  // const age: ?u8 = 99;
  print("\n{s} age type: {}, value: {?}", .{ LOG_PREFIX, @TypeOf(age), age });

  //
  // Optional 'string' type and init to `null`
  //
  const tips: ?[]const u8 = null;
  print(
      "\n{s} tips type: {}, value: {?s}",
      .{ LOG_PREFIX, @TypeOf(tips), tips },
  );

  //
  // Use `if` to capture the `payload` in an optional variable
  //
  if (age) |v|
      print("\n{s} age has a value: {}", .{ LOG_PREFIX, v });

  //
  // If you focus on check whether it's `null` or not
  //
  if (age == null)
      print("\n{s} age is null", .{LOG_PREFIX});

  //
  // If you know exactly the optional variable has payload, use `.?` to get it
  // back!!!
  //
  const I_know_you_have_value: ?usize = 100;
  print(
      "\n{s} I_know_you_have_value value: {}",
      .{ LOG_PREFIX, I_know_you_have_value.? },
  );

  //
  // `orelse` is equivalent with: `if (optional_var) |v| v else XXX`
  //
  // const my_age: ?u8 = if (age) |v| v else 88;
  const my_age: ?u8 = age orelse 88;
  print(
      "\n{s} my_age type: {}, value: {?}",
      .{ LOG_PREFIX, @TypeOf(my_age), my_age },
  );

  const std = @import("std");
  const print = std.debug.print;
#+END_SRC

Output:

#+BEGIN_SRC bash
  [ test_optional_variable ] age type: ?u8, value: null
  [ test_optional_variable ] tips type: ?[]const u8, value: null
  [ test_optional_variable ] age is null
  [ test_optional_variable ] I_know_you_have_value value: 100
  [ test_optional_variable ] my_age type: ?u8, value: 88
#+END_SRC



** Tips

~[]const u8~ read as =const slice of u8= which is a string literal, just leave it right now.

~?[]const u8~ read as =an optional const slice of u8= which is either =null= or a valid string literal.
