* Slice features

** =Slice= in =Zig= just a pointer to an array, =slice= is a pointer and always valid (It means that it can't be ~null~).

** =Slice= has a runtime ~.len~ (array ~.len~ is known at compile-time, can't change).

** Because of =Slice= just a pointer, that's why it doesn't own the memory.

** ~[]T~ (slice of ~T~ ) just the syntax you used to declare variables or function parameters.

But when you use ~@TypeOf()~ on a slice variable, the return value is always ~*[N]T~ (a pointer to many items of T (array)), as slice is a pointer to an array!!!

Don't feel surprise when you see the result of ~@TypeOf(slice_var)~ is different with the ~[]T~:)


** =Zig= has the following rules to cast between =slice= and =array=:

*** ~&[*]T~ (address of many items array) or ~*[N]T~ (pointer to many items array) can be converted to ~[]T~ (slice) automatically by slicing the array implicitly.

#+BEGIN_SRC zig
  //
  // Function accepts `slice` as parameter
  //
  fn func_para_with_array(arr: []const usize) void {}

  //
  // Arrays that will passed into that function
  //
  const arr = [_]usize{ 1, 2, 3 };
  var arr_2 = [_]usize{ 4, 5, 6 };
  var arr_3 = [_]usize{ 7, 8, 9 };

  //
  // You can pass `&array`, it converts to `slice` automatic, imagine like this:
  //
  // &arr     -> arr[0..] 
  // &arr_2   -> arr2[0..]
  // &arr_3   -> arr3[0..]
  //
  func_para_with_array(&arr);
  func_para_with_array(&arr_2);
  func_para_with_array(&arr_3);
#+END_SRC


*** ~[]T~ (slice) can be copied to a new slice (new pointer points to same underlying array) or dereferenced and copied the original array to new one

#+BEGIN_SRC zig
  // Original array
  var int_arr = [_]usize{ 1, 2, 3 };

  // Slice (`*[3]usize`: Pointer to 3 elements usize array, `*T`)
  const int_slice = int_arr[0..];
  // Modify original array last element via slice
  int_slice[2] = 4;

  // Deref the slice and copy the original array to a new array
  var copied_arr = int_slice.*;
  // Change the new array BUT not change the original array
  copied_arr[2] = 8;

  print("\n>>> int_arr type: {}, ptr: {*}, value: {any}", .{ @TypeOf(int_arr), &int_arr, int_arr });
  print("\n>>> int_slice type: {}, ptr: {*}, int_slice[2]: {d}", .{ @TypeOf(int_slice), int_slice, int_slice[2] });
  print("\n>>> copied_arr type: {}, ptr: {*}, value: {any}", .{ @TypeOf(copied_arr), &copied_arr, copied_arr });
#+END_SRC

#+BEGIN_SRC bash
  # >>> int_arr type: [3]usize, ptr: [3]usize@7ffeececcdd8, value: { 1, 2, 4 }
  # >>> int_slice type: *[3]usize, ptr: [3]usize@7ffeececcdd8, int_slice[2]: 4
  # >>> copied_arr type: [3]usize, ptr: [3]usize@7ffeececcdf0, value: { 1, 2, 8 }‚èé
#+END_SRC


*** ~[]T.ptr~ gets back ~[*]T~

#+BEGIN_SRC zig
  var buf: [32]u8 = undefined;
  print("buf is at address {*}\n", .{ &buf });

  const p = @as([]const u8, &buf);
  print("p points to {*}, with length {}\n", .{ p.ptr, p.len });
#+END_SRC


