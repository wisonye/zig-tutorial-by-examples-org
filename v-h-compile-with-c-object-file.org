* Compile with C object files

** Compile C and link to executable directly

This should be the best way to compile C source files and link to the zig executable if you don't care about the intermediate object files.

#+BEGIN_SRC zig
  //
  // `audio_capture` binary
  //
  const exe = b.addExecutable(.{
      .name = "audio_capture",
      .root_source_file = b.path("src/main.zig"),
      .target = target,
      .optimize = optimize,
  });

  //
  // Include the implementation inside header file
  //
  exe.defineCMacro("MINIAUDIO_IMPLEMENTATION", null);

  const common_cflags = [_][]const u8{
      "-Wall",
      "-Wextra",
      "-O3",
  };

  const c_source_files = [_][]const u8{"src/c/miniaudio.c"};

  if (builtin.os.tag == .macos) {
      exe.addCSourceFiles(.{
          .files = &c_source_files,
          .flags = &common_cflags,
      });
  } else if (builtin.os.tag == .linux) {
      const linux_cflags = common_cflags ++ [_][]const u8{
          "-ldl",
          "-lpthread",
          "-lm",
      };
      exe.addCSourceFiles(.{
          .files = &c_source_files,
          .flags = &linux_cflags,
      });
      exe.addIncludePath(.{
          .cwd_relative = "/usr/include",
      });
      exe.linkLibC();
  } else {}

  //
  // Debug print
  //
  print(
      "\n>>> exe.root_module.link_objects.items len: {}, values: {{",
      .{exe.root_module.link_objects.items.len},
  );
  for (exe.root_module.link_objects.items) |link_obj| {
      print("\n>>> \tC source files: {s}", .{link_obj.c_source_files.files});
      print("\n>>> \tC flags: {s}", .{link_obj.c_source_files.flags});
  }
  print("\n>>> \tC include dirs len: {}, values: {{ ", .{
      exe.root_module.include_dirs.items.len,
  });
  for (exe.root_module.include_dirs.items) |include_dir| {
      switch (include_dir) {
          std.Build.Module.IncludeDir.path, std.Build.Module.IncludeDir.path_system, std.Build.Module.IncludeDir.path_after, std.Build.Module.IncludeDir.framework_path, std.Build.Module.IncludeDir.framework_path_system => |path| {
              print("{s}, ", .{path.getDisplayName()});
          },
          else => print("'other_step' or 'config_header_step", .{}),
      }
  }
  print("}}\n>>> }}\n", .{});

  b.installArtifact(exe);
#+END_SRC

Example output:

#+BEGIN_SRC bash
  >>> Target: x86_64
  >>> Target triple: x86_64-macos.14.4.1...14.4.1-none

  >>> exe.root_module.link_objects.items len: 1, values: {
  >>>     C source files: { src/c/miniaudio.c }
  >>>     C flags: { -Wall, -Wextra, -O3 }
  >>>     C include dirs len: 0, values: { }
  >>> }
#+END_SRC


** Compile C into object file and link to it

If you want more control of the object file compilation, use =b.addObject= to create a =compile= step and add the compile step to executable by =exe.addObject()=.

#+BEGIN_SRC zig
  //
  // Compile `src/c/miniaudio.h (c)` to object file
  //
  const miniaudio_obj = b.addObject(.{
      .name = "miniaudio",
      .root_source_file = null,
      .target = target,
      .optimize = optimize,
      //
      // Should control by conditional compilation
      //
      .link_libc = false,
      //
      // Should control by `optimize` settings
      //
      .strip = false,
  });

  const common_cflags = [_][]const u8{
      "-Wall",
      "-Wextra",
      "-O3",
  };

  const c_source_files = [_][]const u8{"src/c/miniaudio.c"};

  //
  // Include the implementation inside header file
  //
  miniaudio_obj.defineCMacro("MINIAUDIO_IMPLEMENTATION", null);

  if (builtin.os.tag == .macos) {
      miniaudio_obj.addCSourceFiles(.{
          .files = &c_source_files,
          .flags = &common_cflags,
      });
  } else if (builtin.os.tag == .linux) {
      const linux_cflags = common_cflags ++ [_][]const u8{
          "-ldl",
          "-lpthread",
          "-lm",
      };
      miniaudio_obj.addCSourceFiles(.{
          .files = &c_source_files,
          .flags = &linux_cflags,
      });
      miniaudio_obj.addIncludePath(.{
          .cwd_relative = "/usr/include",
      });
      miniaudio_obj.linkLibC();
  } else {}

  //
  // Debug print
  //
  print(
      "\n>>> miniaudio_obj.root_module.link_objects.items len: {}, values: {{",
      .{miniaudio_obj.root_module.link_objects.items.len},
  );
  for (miniaudio_obj.root_module.link_objects.items) |link_obj| {
      print("\n>>> \tC source files: {s}", .{link_obj.c_source_files.files});
      print("\n>>> \tC flags: {s}", .{link_obj.c_source_files.flags});
  }
  print("\n>>> \tC include dirs len: {}, values: {{ ", .{
      miniaudio_obj.root_module.include_dirs.items.len,
  });
  for (miniaudio_obj.root_module.include_dirs.items) |include_dir| {
      switch (include_dir) {
          std.Build.Module.IncludeDir.path, std.Build.Module.IncludeDir.path_system, std.Build.Module.IncludeDir.path_after, std.Build.Module.IncludeDir.framework_path, std.Build.Module.IncludeDir.framework_path_system => |path| {
              print("{s}, ", .{path.getDisplayName()});
          },
          else => print("'other_step' or 'config_header_step", .{}),
      }
  }
  print("}}\n>>> }}\n", .{});

  //
  // `audio_capture` binary
  //
  const exe = b.addExecutable(.{
      .name = "audio_capture",
      .root_source_file = b.path("src/main.zig"),
      .target = target,
      .optimize = optimize,
  });

  exe.addObject(miniaudio_obj);

  b.installArtifact(exe);
#+END_SRC


Example Output:

#+BEGIN_SRC bash
  >>> miniaudio_obj.root_module.link_objects.items len: 1, values: {
  >>>     C source files: { src/c/miniaudio.c }
  >>>     C flags: { -Wall, -Wextra, -O3 }
  >>>     C include dirs len: 0, values: { }
  >>> }
#+END_SRC


** Compile C into static library and link to it

If you want to compile a few C source files as a static library and link it to the zig executable, then choose this way:)

#+BEGIN_SRC zig
  //
  // Compile `src/c/miniaudio.h (c)` as static library
  //
  const miniaudio_obj = b.addStaticLibrary(.{
      .name = "miniaudio",
      .root_source_file = null,
      .target = target,
      .optimize = optimize,
  });

  const common_cflags = [_][]const u8{
      "-Wall",
      "-Wextra",
      "-O3",
  };

  const c_source_files = [_][]const u8{"src/c/miniaudio.c"};

  //
  // Include the implementation inside header file
  //
  miniaudio_obj.defineCMacro("MINIAUDIO_IMPLEMENTATION", null);

  if (builtin.os.tag == .macos) {
      miniaudio_obj.addCSourceFiles(.{
          .files = &c_source_files,
          .flags = &common_cflags,
      });
  } else if (builtin.os.tag == .linux) {
      const linux_cflags = common_cflags ++ [_][]const u8{
          "-ldl",
          "-lpthread",
          "-lm",
      };
      miniaudio_obj.addCSourceFiles(.{
          .files = &c_source_files,
          .flags = &linux_cflags,
      });
      miniaudio_obj.addIncludePath(.{
          .cwd_relative = "/usr/include",
      });
      miniaudio_obj.linkLibC();
  } else {}

  //
  // Debug print
  //
  print(
      "\n>>> miniaudio_obj.root_module.link_objects.items len: {}, values: {{",
      .{miniaudio_obj.root_module.link_objects.items.len},
  );
  for (miniaudio_obj.root_module.link_objects.items) |link_obj| {
      print("\n>>> \tC source files: {s}", .{link_obj.c_source_files.files});
      print("\n>>> \tC flags: {s}", .{link_obj.c_source_files.flags});
  }
  print("\n>>> \tC include dirs len: {}, values: {{ ", .{
      miniaudio_obj.root_module.include_dirs.items.len,
  });
  for (miniaudio_obj.root_module.include_dirs.items) |include_dir| {
      switch (include_dir) {
          std.Build.Module.IncludeDir.path, std.Build.Module.IncludeDir.path_system, std.Build.Module.IncludeDir.path_after, std.Build.Module.IncludeDir.framework_path, std.Build.Module.IncludeDir.framework_path_system => |path| {
              print("{s}, ", .{path.getDisplayName()});
          },
          else => print("'other_step' or 'config_header_step", .{}),
      }
  }
  print("}}\n>>> }}\n", .{});


  //
  // `audio_capture` binary and link to `miniaudio_obj` (lib)
  //
  const exe = b.addExecutable(.{
      .name = "audio_capture",
      .root_source_file = b.path("src/main.zig"),
      .target = target,
      .optimize = optimize,
  });

  exe.linkLibrary(miniaudio_obj);

  b.installArtifact(exe);
#+END_SRC


Example Output:

#+BEGIN_SRC bash
  >>> miniaudio_obj.root_module.link_objects.items len: 1, values: {
  >>>     C source files: { src/c/miniaudio.c }
  >>>     C flags: { -Wall, -Wextra, -O3 }
  >>>     C include dirs len: 0, values: { }
  >>> }
#+END_SRC
