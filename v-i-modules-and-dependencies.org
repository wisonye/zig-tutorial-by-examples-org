* Modules and dependencies

Since =0.11=, =zig= brings the natively supported package manager, so you can add dependencies by adding =module= from another =zig= project.

Here is the official doc: https://ziglang.org/download/0.11.0/release-notes.html#Package-Management

Summarises steps:

** 1. How to export module from your package

If you want another package (consumer package) that is able to use  your current zig code, then you need to create a public =Module= like this:

#+BEGIN_SRC zig
  //
  // Create public module
  //
  const my_module = b.addModule("my_module_name_here", .{
      .root_source_file = std.Build.LazyPath{
          .src_path = .{
              .owner = b,
              .sub_path = "src/my_module_filename.zig",
          },
      },
  });
#+END_SRC

You should make your GitHub repo become =public=, as usually, consumer package will have a ~url~ points to your GitHub repo as their package dependency.

Btw, regarding binary artifacts: any artifact which is installed (for instance, via ~std.Build.installArtifact~) is exposed to dependant packages!!!


In some cases, you want a private module which only visible inside your own package (project scope), then you use ~createModule~ instead of ~addModule~:

#+BEGIN_SRC zig
  //
  // Create private module
  //
  const logger_module = b.createModule(.{
      .root_source_file = std.Build.LazyPath{
          .src_path = .{
              .owner = b,
              .sub_path = "./src/logger_utils.zig",
          },
      },
  });
#+END_SRC


** 2. How to export all structs/functions in a single module

As you can see that ~b.addModule~ only accept a single zig file, which means you have to export multiple modules if you want to export multiple structs/functions in separate files.

For example, you have the following folder structure:

#+BEGIN_SRC bash
  .
  ├── build.zig
  ├── README.md
  ├── src
  │   ├── bits.zig
  │   ├── main.zig
  │   ├── random_numbers_libc.zig
  │   ├── random_numbers.zig
  │   └── z_utils.zig
#+END_SRC

If you want to export ~Bits~ from ~bits.zig~ and ~Random~ from  ~random_numbers.zig~, then you need to create multiple modules in ~build.zig~:

#+BEGIN_SRC zig
  const random_module = b.addModule("Random", .{
      .root_source_file = std.Build.LazyPath{
          .src_path = .{
              .owner = b,
              .sub_path = "src/random_numbers.zig",
          },
      },
  });

  const bits_module = b.addModule("Bits", .{
      .root_source_file = std.Build.LazyPath{
          .src_path = .{
              .owner = b,
              .sub_path = "src/bits.zig",
          },
      },
  });
#+END_SRC

So in the consumer packages, it imports like this:

#+BEGIN_SRC zig
  const random = @import("z_utils_random").Random;
  const bits = @import("z_utils_bits").Bits;
#+END_SRC


The better way is to use a single zig file to export all stuff. For example, re-pub all imports structs in ~z_utils.zig~:

#+BEGIN_SRC zig
  pub const Bits = @import("bits.zig").Bits;
  pub const Random = @import("random_numbers.zig").Random;
#+END_SRC

Then only one module exports in ~build.zig~:

#+BEGIN_SRC zig
  const z_utils_module = b.addModule("z_utils", .{
      .root_source_file = std.Build.LazyPath{
          .src_path = .{
              .owner = b,
              .sub_path = "src/z_utils.zig",
          },
      },
  });
#+END_SRC

In the consumer package, it imports like this:

#+BEGIN_SRC zig
  const random = @import("z_utils").Random;
  const bits = @import("z_utils").Bits;
#+END_SRC



** 3. How to import modules from another package by ~build.zig.zon~

You need to go through the following steps:


*** 1) Add a ~build.zig.zon~ to your project root folder

This ~build.zig.zon~ holds all dependencies (with one or mulitple modules) for your package:

You don't need to edit this file manually, you can use =zig fetch --save url= instead, I'll talk about that later:

#+BEGIN_SRC zig
.{
    .name = "machine-learning-demo-zig",
    .version = "0.1.0",
    .dependencies = .{
        .z_utils = .{
            .url = "https://github.com/wisonye/z-utils/archive/a180a0c4c8e0f7ef5f5605c2b3344bbc9cd759d2.tar.gz",
            .hash = "12209840ee5d705cea5b236679be28090c4b4fd28a998892c7feba5a1c779723dd4f",
        },
        .another_lib = .{
            .url = "https://github.com/wisonye/another_lib/archive/a180a0c4c8e0f7ef5f5605c2b3344bbc9cd759d2.tar.gz",
            .hash = "12209840ee5d705cea5b236679be28090c4b4fd28a998892c7feba5a1c779723dd4f",
        },
    },
}
#+END_SRC

- ~.name~: Your current package name, just a string, it doesn't matter.

- ~.version~: Doesn't matter at this moment.

- ~.dependencies~: An array to hold all dependency struct instances.

- ~.z_utils~: The dependency name that you put into ~b.dependency()~.

- ~.url~: The dependency repo URL with the following syntax:

    https://github.com/USER_NAME/REPO_NAME/archive/COMMIT_HASH.tar.gz

    How to get the =COMMIT_HASH=???

    #+BEGIN_SRC bash
      git ls-remote REPO_PUBLIC_URL

      # a180a0c4c8e0f7ef5f5605c2b3344bbc9cd759d2        HEAD
      # a180a0c4c8e0f7ef5f5605c2b3344bbc9cd759d2        refs/heads/master
    #+END_SRC

- ~.hash~: For the first time, you don't know that ~.hash~ value, so your dependency structure looks like this:

    #+BEGIN_SRC zon
        .z_utils = .{
            .url = "https://github.com/wisonye/z-utils/archive/a180a0c4c8e0f7ef5f5605c2b3344bbc9cd759d2.tar.gz",
        },
    #+END_SRC

    Then you run =zig build=, it tells you the actual hash value you need to add:

    #+BEGIN_SRC bash
      zig build run --verbose -fsummary

      # build.zig.zon:6:20: error: url field is missing corresponding hash field
      #             .url = "https://github.com/wisonye/z-utils/archive/a180a0c4c8e0f7ef5f5605c2b3344bbc9cd759d2.tar.gz",
      #                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # note: expected .hash = "12209840ee5d705cea5b236679be28090c4b4fd28a998892c7feba5a1c779723dd4f",
    #+END_SRC

    So, you can copy that =.hash= line and add it to your dependency:

    #+BEGIN_SRC zon
    .z_utils = .{
        .url = "https://github.com/wisonye/z-utils/archive/a180a0c4c8e0f7ef5f5605c2b3344bbc9cd759d2.tar.gz",
        .hash = "12209840ee5d705cea5b236679be28090c4b4fd28a998892c7feba5a1c779723dd4f",
    },
    #+END_SRC


*** 2) Use =zig fetch= to add dependencies in to your ~build.zig.zon~

#+BEGIN_SRC bash
  #
  # If you fetch from an URL
  #
  zig fetch --save https://github.com/wisonye/z-utils/archive/a180a0c4c8e0f7ef5f5605c2b3344bbc9cd759d2.tar.gz

  #
  # If you fetch from your local folder (even a folder symbol link)
  #
  zig fetch --save ~/zig/z-utils

  # If you want to change the dependency's name, you can do `--save=NAME`
  zig fetch --save=zutils ~/zig/z-utils

#+END_SRC


*** 3) Add the following stuff into your ~build.zig~

In the build script, dependencies can be referenced using the ~std.Build.dependency~ function. This takes the name of a dependency (as given in =build.zig.zon=) and returns a ~*std.Build.Dependency~. You can then use the artifact and module methods on this object to get binary artifacts and Zig modules exposed by the dependency.

#+BEGIN_SRC zig
  //
  // All dependencies (with one or mulitple modules) you needed
  //
  const z_utils_dep = b.dependency("z_utils", .{
      .target = target,
      .optimize = optimize,
  });

  const z_utils_module = z_utils_dep.module("z_utils");
  exe.root_module.addImport("z_utils", z_utils_module);
#+END_SRC


- ~b.dependency("z_utils")~: that ~"z_utils"~ is the dependency name which comes from ~.z_utils = .{}~ in the ~build.zig.zon~ under ~dependencies~ struct.

- ~z_utils_dep.module("z_utils");~: that ~"z_utils"~ is the module name which comes from the dependency package's ~build.zig~:

  #+BEGIN_SRC zig
    const z_utils_module = b.addModule("z_utils", .{
  #+END_SRC


*** 4) Import the module and use it

#+BEGIN_SRC zig
  const random = @import("z_utils").Random;
  const bits = @import("z_utils").Bits;
#+END_SRC

