* Build System

For more details and updated version, plz read from [[https://ziglang.org/learn/build-system][here]]

Here are the simple steps to create a =Zig= project:

#+BEGIN_SRC bash
  mkdir my-zig-project && cd my-zig-project

  # Create a project
  zig init
#+END_SRC



It creates the following folder structure:

#+BEGIN_SRC bash
  tree -L 1
  .
  ├── build.zig       # Build script configuration
  ├── build.zig.zon   # Package dependencies configuration
  ├── zig-cache       # Build cache
  ├── zig-out         # Default output folder
  └── src             # Your zig source code
       ├── main.zig   # Sample executable source file
       └── root.zig   # Sample libaray source file
#+END_SRC



By default, you can run the following commands:

| Command        | Description                                                   |
|----------------+---------------------------------------------------------------|
| ~zig build~      | Build the executable/library and install to =zig-out/{bin,lib}= |
| ~zig build run~  | Run the installed executable.                                 |
| ~zig build test~ | Run the unit test.                                            |
|                |                                                               |


** About =artifact=

You’ll see the word =artifact= used often in the build process. One way to grasp =artifact= is to think it as the output of the build:

+ If you are building a shared library, the =.so= file is the artifact

+ If you are building a static library, the =.a= file is the artifact

+ If you are building an executable, the actual execuable is the artifact.
