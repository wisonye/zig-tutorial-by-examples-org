* Zig tutorial by examples (org version)

This tutorial helps you to learn =Zig= in a quick and easy way. It targets the following audiences:

+ With a system programming language background (C/C++/Rust, etc) and want to try =Zig=

+ Comes from a non-system programming language background and wants to give it a try


I wrote this tutorial as a summary after I use =Zig= to write a few projects (including 2D gaming), so that's why you always see straightforward summarises instead of amazing fancy words in this tutorial. 

Also, you can treat this tutorial as a quick =Q&A= or manual as well. That means you don't need to go through from top to bottom, just click the chapter you're interested in and dive in. In some chapters, I put extra links to other important and valuable blogs/youtube/articles, just in case you want to know more about that topic.

I'm working on some machine learning project with =Zig= at this moment,  I will update this tutorial from time to time, hope it helps:)


* The tutorial covers the following topics with detailed examples

** [[file:what-is-zig.org][What is Zig]]
** [[file:helloworld.org][Hello world cross-compilation]]
** [[file:helloworld-c.org][Hello world (C) cross-compilation]]
** [[file:data-types.org][Data types]]
** [[file:variables.org][Variables]]
*** [[file:optional_var.org][Optional]]
** [[file:if.org][if]]
** [[file:for.org][for]]
** [[file:while.org][while]]
** [[file:switch.org][switch]]
** [[file:enum.org][Enum]]
** [[file:error.org][Error]]
** [[file:struct.org][Struct]]
** [[file:import-struct.org][Import struct]]
** [[file:anonymous-function.org][Anonymous function]]
** [[file:tagged-union.org][Tagged union]]
** [[file:array.org][Array]]
** [[file:string-format.org][String format]]
** [[file:pointer.org][Pointers]]
** [[file:slice.org][Slice]]
*** [[file:slice-syntax.org][Slice syntax]]
*** [[file:why-slice-intead-of-pointer.org][Why slice instead of pointer]]
*** [[file:slice-features.org][Slice features]]
*** [[file:slice-pitfall.org][Slice pitfall]]
** [[file:string.org][String]]
** [[file:manipulate-string.org][Manipulate String]]
** [[file:number-to-string.org][Number to string]]
** [[file:typedef.org][typedef]]
** =comptime= and generic
*** [[file:comptime.org][comptime]]
*** [[file:static-dispatch.org][Static dispatch]]
** [[file:interface.org][Interface and dynamic dispatch]]
** [[file:bits.org][Bits]]
** [[file:everything-about-logging.org][Everything about logging]]
** [[file:logging-in-unit-test.org][logging in unit test]]
** [[file:reader-and-writer.org][Reader and writer]]
** [[file:struct-field-compression.org][Struct fields compression]]
** [[file:builtin-functions.org][Builtin functions]]
*** [[file:builtin-type-info.org][Type info]]
*** [[file:builtin-type-convesion.org][Type conversion]]
*** [[file:builtin-pointer-conversion.org][Pointer conversion]]
** [[file:memory.org][Memory]]
*** [[file:choose-an-allocator.org][Choose an allocator]]
*** [[file:print-memory-in-hex.org][Print memory bytes in HEX]]
** [[file:build-system.org][Build System]]
*** [[file:how-to-create-release-build.org][Release build]]
*** [[file:conditional-compilation.org][Conditional compilation]]
*** [[file:build-multiple-targets.org][Build multiple targets]]
*** [[file:custom-build-step.org][Customize build step]]
*** [[file:a-pitfall-when-using-dependon.org][A pitfall when using dependOn]]
*** Add existing library
*** [[file:compile-c-project.org][Compile C project]]
*** Modules and dependencies
*** Pass build option to dependencies
*** Test fixed dependencies locally
** Working with C
*** [[file:import-c-headers.org][Import C headers]]
*** [[file:c-data-type.org][C data type]]
*** [[file:deal-with-c-pointer.org][Deal with C pointers]]
*** Equivalent functions in `Zig`
*** Variadic functions in `Zig`
** How to
*** Read environment variable
*** Execute command
*** Use ArrayList
*** Use HashMap
*** Handle JSON
*** Iterator pattern
*** Multithreading
*** Send HTTP request
