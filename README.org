* Zig tutorial by examples (org version)

This tutorial helps you to learn =Zig= in a quick and easy way. It targets the following audiences:

+ With a system programming language background (C/C++/Rust, etc) and want to try =Zig=

+ Comes from a non-system programming language background and wants to give it a try


I wrote this tutorial as a summary after I use =Zig= to write a few projects (including 2D gaming), so that's why you always see straightforward summarises instead of amazing fancy words in this tutorial. 

Also, you can treat this tutorial as a quick =Q&A= or manual as well. That means you don't need to go through from top to bottom, just click the chapter you're interested in and dive in. In some chapters, I put extra links to other important and valuable blogs/youtube/articles, just in case you want to know more about that topic.

** The tutorial covers the following topics with detailed examples

*** [[file:a-a-what-is-zig.org][What is Zig]]
**** [[file:a-b-helloworld.org][Hello world cross-compilation]]
**** [[file:a-c-helloworld-c.org][Hello world (C) cross-compilation]]
*** [[file:b-data-types.org][Data types]]
*** [[file:c-a-variables.org][Variables]]
**** [[file:c-b-optional_var.org][Optional variable]]
*** [[file:block-expression-return-value.org][Block expression return value]]
*** Control flow
**** [[file:d-a-if.org][if]]
**** [[file:d-b-for.org][for]]
**** [[file:d-c-while.org][while]]
**** [[file:d-d-switch.org][switch]]
*** [[file:e-enum.org][Enum]]
*** [[file:union.org][Union]]
*** [[file:f-error.org][Error]]
*** [[file:g-a-struct.org][Struct]]
**** [[file:g-b-import-struct.org][Import struct]]
**** [[file:g-c-anonymous-function.org][Anonymous function]]
**** [[file:g-d-packed-struct.org][Packed struct]]
*** [[file:h-tagged-union.org][Tagged union]]
*** [[file:i-array.org][Array]]
*** [[file:j-string-format.org][String format]]
*** [[file:k-pointer.org][Pointers]]
*** [[file:l-a-slice.org][Slice]]
**** [[file:l-b-slice-syntax.org][Slice syntax]]
**** [[file:l-c-why-slice-intead-of-pointer.org][Why slice instead of pointer]]
**** [[file:l-d-slice-features.org][Slice features]]
**** [[file:l-e-slice-pitfall.org][Slice pitfall]]
*** [[file:m-a-string.org][String]]
**** [[file:m-b-manipulate-string.org][Manipulate String]]
**** [[file:m-c-number-to-string.org][Number to string]]
*** [[file:n-typedef.org][typedef]]
*** =comptime= and generic
**** [[file:o-d-comptime-performance.org][comptime and performance]]
**** [[file:o-a-comptime.org][comptime and generic]]
**** [[file:o-b-static-dispatch.org][Static dispatch]]
**** [[file:o-c-interface.org][Interface and dynamic dispatch]]
**** [[file:o-e-comptime-for-source-code-checking-purpose.org][comptime for source code checking purposes]]
*** [[file:p-bits.org][Bits]]
*** [[file:q-a-everything-about-logging.org][Everything about logging]]
**** [[file:q-b-logging-in-unit-test.org][logging in unit test]]
*** [[file:r-reader-and-writer.org][Reader and writer]]
*** [[file:t-a-builtin-functions.org][Builtin functions]]
**** [[file:t-b-builtin-type-info.org][Type info]]
**** [[file:t-c-builtin-type-convesion.org][Type conversion]]
**** [[file:t-d-builtin-pointer-conversion.org][Pointer conversion]]
*** [[file:u-a-memory.org][Memory]]
**** [[file:u-b-choose-an-allocator.org][Choose an allocator]]
**** [[file:u-c-print-memory-in-hex.org][Print memory bytes in HEX]]
*** [[file:v-a-build-system.org][Build System]]
**** [[file:v-b-how-to-create-release-build.org][Release build]]
**** [[file:v-c-a-print-target-triple-info.org][Print target triple info]]
**** [[file:v-c-conditional-compilation.org][Conditional compilation]]
**** [[file:v-d-build-multiple-targets.org][Build multiple targets]]
**** [[file:cross-compilation-example.org][Cross-compilation example]]
**** [[file:v-e-custom-build-step.org][Customize build step]]
**** [[file:v-f-a-pitfall-when-using-dependon.org][A pitfall when using dependOn]]
**** [[file:v-g-how-to-add-exisiting-library.org][Add existing library]]
**** [[file:v-h-compile-c-project.org][Compile C project]]
**** [[file:v-h-compile-with-c-object-file.org][Compile with C object files]]
**** [[file:v-i-modules-and-dependencies.org][Modules and dependencies]]
**** [[file:v-j-pass-build-option-to-dependencies.org][Pass build option to dependencies]]
**** [[file:v-k-test-fixed-dependencies-locally.org][Test fixed dependencies locally]]
*** Working with C
**** [[file:w-a-import-c-headers.org][Import C headers]]
**** [[file:w-b-c-data-type.org][C data type]]
**** [[file:w-c-deal-with-c-pointer.org][Deal with C pointers]]
**** [[file:w-d-c-function-in-zig.org][C functions in Zig]]
**** [[file:w-e-variadic-functions-in-zig.org][Variadic functions in Zig]]
*** How to
**** [[file:x-a-how-to-read-env.org][Read environment variable]]
**** [[file:x-b-how-to-read-process-arguments.org][Read process arguments]]
**** [[file:x-c-how-to-execute-command.org][Execute command]]
**** [[file:x-d-how-to-use-arraylist.org][Use ArrayList]]
**** [[file:x-e-how-to-use-hashmap.org][Use HashMap]]
**** [[file:x-f-how-to-handle-json.org][Handle JSON]]
**** [[file:x-g-how-to-iterator-pattern.org][Iterator pattern]]
**** [[file:x-h-how-to-use-multithreading.org][Multithreading]]
**** [[file:x-i-how-to-send-http-request.org][Send HTTP request]]
*** Web Assembly
[[file:y-a-compile-to-wasm-and-run-in-js.org][Compile to WASM and run in JavaScript]]
*** Type handling
[[file:z-a-how-to-remove-optional-type.org][How to remove optional type(~?X~ --> ~X~)]]
